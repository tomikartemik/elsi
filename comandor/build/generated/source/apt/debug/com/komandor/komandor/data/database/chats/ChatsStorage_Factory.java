// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.data.database.chats;

import com.komandor.komandor.data.database.messages.MessagesStorage;
import com.komandor.komandor.data.temporary.CryptoStorage;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ChatsStorage_Factory implements Factory<ChatsStorage> {
  private final Provider<ChatDao> chatDaoProvider;

  private final Provider<MessagesStorage> messagesStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  public ChatsStorage_Factory(
      Provider<ChatDao> chatDaoProvider,
      Provider<MessagesStorage> messagesStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    this.chatDaoProvider = chatDaoProvider;
    this.messagesStorageProvider = messagesStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
  }

  @Override
  public ChatsStorage get() {
    return new ChatsStorage(
        chatDaoProvider.get(), messagesStorageProvider.get(), cryptoStorageProvider.get());
  }

  public static ChatsStorage_Factory create(
      Provider<ChatDao> chatDaoProvider,
      Provider<MessagesStorage> messagesStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    return new ChatsStorage_Factory(
        chatDaoProvider, messagesStorageProvider, cryptoStorageProvider);
  }

  public static ChatsStorage newChatsStorage(
      ChatDao chatDao, MessagesStorage messagesStorage, CryptoStorage cryptoStorage) {
    return new ChatsStorage(chatDao, messagesStorage, cryptoStorage);
  }
}
