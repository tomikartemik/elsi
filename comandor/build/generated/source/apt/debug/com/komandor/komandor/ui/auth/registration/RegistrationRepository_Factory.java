// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.auth.registration;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.api.SocketAPI;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import com.komandor.komandor.ui.main.profile.ProfileRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class RegistrationRepository_Factory implements Factory<RegistrationRepository> {
  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<TemporaryStorage> temporaryStorageProvider;

  private final Provider<ProfileRepository> profileRepositoryProvider;

  private final Provider<SocketAPI> socketAPIProvider;

  public RegistrationRepository_Factory(
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<ProfileRepository> profileRepositoryProvider,
      Provider<SocketAPI> socketAPIProvider) {
    this.komandorAPIProvider = komandorAPIProvider;
    this.temporaryStorageProvider = temporaryStorageProvider;
    this.profileRepositoryProvider = profileRepositoryProvider;
    this.socketAPIProvider = socketAPIProvider;
  }

  @Override
  public RegistrationRepository get() {
    return new RegistrationRepository(
        komandorAPIProvider.get(),
        temporaryStorageProvider.get(),
        profileRepositoryProvider.get(),
        socketAPIProvider.get());
  }

  public static RegistrationRepository_Factory create(
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<ProfileRepository> profileRepositoryProvider,
      Provider<SocketAPI> socketAPIProvider) {
    return new RegistrationRepository_Factory(
        komandorAPIProvider,
        temporaryStorageProvider,
        profileRepositoryProvider,
        socketAPIProvider);
  }

  public static RegistrationRepository newRegistrationRepository(
      KomandorAPI komandorAPI,
      TemporaryStorage temporaryStorage,
      ProfileRepository profileRepository,
      SocketAPI socketAPI) {
    return new RegistrationRepository(komandorAPI, temporaryStorage, profileRepository, socketAPI);
  }
}
