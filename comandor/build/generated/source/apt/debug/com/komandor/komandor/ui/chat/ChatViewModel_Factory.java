// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.chat;

import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.temporary.CryptoStorage;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ChatViewModel_Factory implements Factory<ChatViewModel> {
  private final Provider<ChatRepository> chatRepositoryProvider;

  private final Provider<ChatsStorage> chatsStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  public ChatViewModel_Factory(
      Provider<ChatRepository> chatRepositoryProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    this.chatRepositoryProvider = chatRepositoryProvider;
    this.chatsStorageProvider = chatsStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
  }

  @Override
  public ChatViewModel get() {
    return new ChatViewModel(
        chatRepositoryProvider.get(), chatsStorageProvider.get(), cryptoStorageProvider.get());
  }

  public static ChatViewModel_Factory create(
      Provider<ChatRepository> chatRepositoryProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    return new ChatViewModel_Factory(
        chatRepositoryProvider, chatsStorageProvider, cryptoStorageProvider);
  }

  public static ChatViewModel newChatViewModel(
      ChatRepository chatRepository, ChatsStorage chatsStorage, CryptoStorage cryptoStorage) {
    return new ChatViewModel(chatRepository, chatsStorage, cryptoStorage);
  }
}
