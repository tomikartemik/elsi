// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.main.profile;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.database.KomandorDatabase;
import com.komandor.komandor.data.database.certificates.CertificateDao;
import com.komandor.komandor.data.database.users.UserDao;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ProfileRepository_Factory implements Factory<ProfileRepository> {
  private final Provider<KomandorDatabase> komandorDatabaseProvider;

  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<TemporaryStorage> temporaryStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  private final Provider<UserDao> userDaoProvider;

  private final Provider<CertificateDao> certificateDaoProvider;

  public ProfileRepository_Factory(
      Provider<KomandorDatabase> komandorDatabaseProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<UserDao> userDaoProvider,
      Provider<CertificateDao> certificateDaoProvider) {
    this.komandorDatabaseProvider = komandorDatabaseProvider;
    this.komandorAPIProvider = komandorAPIProvider;
    this.temporaryStorageProvider = temporaryStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
    this.userDaoProvider = userDaoProvider;
    this.certificateDaoProvider = certificateDaoProvider;
  }

  @Override
  public ProfileRepository get() {
    return new ProfileRepository(
        komandorDatabaseProvider.get(),
        komandorAPIProvider.get(),
        temporaryStorageProvider.get(),
        cryptoStorageProvider.get(),
        userDaoProvider.get(),
        certificateDaoProvider.get());
  }

  public static ProfileRepository_Factory create(
      Provider<KomandorDatabase> komandorDatabaseProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<UserDao> userDaoProvider,
      Provider<CertificateDao> certificateDaoProvider) {
    return new ProfileRepository_Factory(
        komandorDatabaseProvider,
        komandorAPIProvider,
        temporaryStorageProvider,
        cryptoStorageProvider,
        userDaoProvider,
        certificateDaoProvider);
  }

  public static ProfileRepository newProfileRepository(
      KomandorDatabase komandorDatabase,
      KomandorAPI komandorAPI,
      TemporaryStorage temporaryStorage,
      CryptoStorage cryptoStorage,
      UserDao userDao,
      CertificateDao certificateDao) {
    return new ProfileRepository(
        komandorDatabase, komandorAPI, temporaryStorage, cryptoStorage, userDao, certificateDao);
  }
}
