// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.di;

import com.komandor.komandor.App;
import com.komandor.komandor.data.database.KomandorDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class StorageModule_ProvideDatabaseFactory implements Factory<KomandorDatabase> {
  private final StorageModule module;

  private final Provider<App> appProvider;

  public StorageModule_ProvideDatabaseFactory(StorageModule module, Provider<App> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public KomandorDatabase get() {
    return proxyProvideDatabase(module, appProvider.get());
  }

  public static StorageModule_ProvideDatabaseFactory create(
      StorageModule module, Provider<App> appProvider) {
    return new StorageModule_ProvideDatabaseFactory(module, appProvider);
  }

  public static KomandorDatabase proxyProvideDatabase(StorageModule instance, App app) {
    return Preconditions.checkNotNull(
        instance.provideDatabase(app), "Cannot return null from a non-@Nullable @Provides method");
  }
}
