// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.chat;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.api.SocketAPI;
import com.komandor.komandor.data.database.KomandorDatabase;
import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.database.files.FileStorage;
import com.komandor.komandor.data.database.messages.MessagesStorage;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ChatRepository_Factory implements Factory<ChatRepository> {
  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<KomandorDatabase> komandorDatabaseProvider;

  private final Provider<SocketAPI> socketAPIProvider;

  private final Provider<MessagesStorage> messagesStorageProvider;

  private final Provider<ChatsStorage> chatsStorageProvider;

  private final Provider<FileStorage> fileStorageProvider;

  private final Provider<TemporaryStorage> temporaryStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  public ChatRepository_Factory(
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<KomandorDatabase> komandorDatabaseProvider,
      Provider<SocketAPI> socketAPIProvider,
      Provider<MessagesStorage> messagesStorageProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<FileStorage> fileStorageProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    this.komandorAPIProvider = komandorAPIProvider;
    this.komandorDatabaseProvider = komandorDatabaseProvider;
    this.socketAPIProvider = socketAPIProvider;
    this.messagesStorageProvider = messagesStorageProvider;
    this.chatsStorageProvider = chatsStorageProvider;
    this.fileStorageProvider = fileStorageProvider;
    this.temporaryStorageProvider = temporaryStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
  }

  @Override
  public ChatRepository get() {
    return new ChatRepository(
        komandorAPIProvider.get(),
        komandorDatabaseProvider.get(),
        socketAPIProvider.get(),
        messagesStorageProvider.get(),
        chatsStorageProvider.get(),
        fileStorageProvider.get(),
        temporaryStorageProvider.get(),
        cryptoStorageProvider.get());
  }

  public static ChatRepository_Factory create(
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<KomandorDatabase> komandorDatabaseProvider,
      Provider<SocketAPI> socketAPIProvider,
      Provider<MessagesStorage> messagesStorageProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<FileStorage> fileStorageProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    return new ChatRepository_Factory(
        komandorAPIProvider,
        komandorDatabaseProvider,
        socketAPIProvider,
        messagesStorageProvider,
        chatsStorageProvider,
        fileStorageProvider,
        temporaryStorageProvider,
        cryptoStorageProvider);
  }

  public static ChatRepository newChatRepository(
      KomandorAPI komandorAPI,
      KomandorDatabase komandorDatabase,
      SocketAPI socketAPI,
      MessagesStorage messagesStorage,
      ChatsStorage chatsStorage,
      FileStorage fileStorage,
      TemporaryStorage temporaryStorage,
      CryptoStorage cryptoStorage) {
    return new ChatRepository(
        komandorAPI,
        komandorDatabase,
        socketAPI,
        messagesStorage,
        chatsStorage,
        fileStorage,
        temporaryStorage,
        cryptoStorage);
  }
}
