// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.google.gson.Gson;
import com.komandor.komandor.App;
import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.api.SocketAPI;
import com.komandor.komandor.data.database.KomandorDatabase;
import com.komandor.komandor.data.database.certificates.CertificateDao;
import com.komandor.komandor.data.database.chats.ChatDao;
import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.database.chats.ChatsStorage_Factory;
import com.komandor.komandor.data.database.contacts.ContactDao;
import com.komandor.komandor.data.database.contacts.ContactsCertificatesDao;
import com.komandor.komandor.data.database.contacts.ContactsStorage;
import com.komandor.komandor.data.database.contacts.ContactsStorage_Factory;
import com.komandor.komandor.data.database.files.FileDao;
import com.komandor.komandor.data.database.files.FileStorage;
import com.komandor.komandor.data.database.files.FileStorage_Factory;
import com.komandor.komandor.data.database.messages.MessageDao;
import com.komandor.komandor.data.database.messages.MessagesStorage;
import com.komandor.komandor.data.database.messages.MessagesStorage_Factory;
import com.komandor.komandor.data.database.users.UserDao;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import com.komandor.komandor.ui.auth.cert_list.CertListFragment;
import com.komandor.komandor.ui.auth.cert_list.CertListFragment_MembersInjector;
import com.komandor.komandor.ui.auth.cert_validation.CertValidationFragment;
import com.komandor.komandor.ui.auth.cert_validation.CertValidationFragment_MembersInjector;
import com.komandor.komandor.ui.auth.cert_validation.CertValidationRepository;
import com.komandor.komandor.ui.auth.cert_validation.CertValidationRepository_Factory;
import com.komandor.komandor.ui.auth.cert_validation.CertValidationViewModel;
import com.komandor.komandor.ui.auth.cert_validation.CertValidationViewModel_Factory;
import com.komandor.komandor.ui.auth.registration.RegistrationFragment;
import com.komandor.komandor.ui.auth.registration.RegistrationFragment_MembersInjector;
import com.komandor.komandor.ui.auth.registration.RegistrationRepository;
import com.komandor.komandor.ui.auth.registration.RegistrationRepository_Factory;
import com.komandor.komandor.ui.auth.registration.RegistrationViewModel;
import com.komandor.komandor.ui.auth.registration.RegistrationViewModel_Factory;
import com.komandor.komandor.ui.chat.ChatFragment;
import com.komandor.komandor.ui.chat.ChatFragment_MembersInjector;
import com.komandor.komandor.ui.chat.ChatRepository;
import com.komandor.komandor.ui.chat.ChatRepository_Factory;
import com.komandor.komandor.ui.chat.ChatViewModel;
import com.komandor.komandor.ui.chat.ChatViewModel_Factory;
import com.komandor.komandor.ui.contact_info.ContactInfoFragment;
import com.komandor.komandor.ui.contact_info.ContactInfoFragment_MembersInjector;
import com.komandor.komandor.ui.contact_info.ContactInfoRepository;
import com.komandor.komandor.ui.contact_info.ContactInfoRepository_Factory;
import com.komandor.komandor.ui.contact_info.ContactInfoViewModel;
import com.komandor.komandor.ui.contact_info.ContactInfoViewModel_Factory;
import com.komandor.komandor.ui.main.chats.ChatsFragment;
import com.komandor.komandor.ui.main.chats.ChatsFragment_MembersInjector;
import com.komandor.komandor.ui.main.chats.ChatsRepository;
import com.komandor.komandor.ui.main.chats.ChatsRepository_Factory;
import com.komandor.komandor.ui.main.chats.ChatsViewModel;
import com.komandor.komandor.ui.main.chats.ChatsViewModel_Factory;
import com.komandor.komandor.ui.main.contacts.ContactsFragment;
import com.komandor.komandor.ui.main.contacts.ContactsFragment_MembersInjector;
import com.komandor.komandor.ui.main.contacts.ContactsRepository;
import com.komandor.komandor.ui.main.contacts.ContactsRepository_Factory;
import com.komandor.komandor.ui.main.contacts.ContactsViewModel;
import com.komandor.komandor.ui.main.contacts.ContactsViewModel_Factory;
import com.komandor.komandor.ui.main.profile.ProfileFragment;
import com.komandor.komandor.ui.main.profile.ProfileFragment_MembersInjector;
import com.komandor.komandor.ui.main.profile.ProfileRepository;
import com.komandor.komandor.ui.main.profile.ProfileRepository_Factory;
import com.komandor.komandor.ui.main.profile.ProfileViewModel;
import com.komandor.komandor.ui.main.profile.ProfileViewModel_Factory;
import com.komandor.komandor.ui.message_info.MessageInfoFragment;
import com.komandor.komandor.ui.message_info.MessageInfoFragment_MembersInjector;
import com.komandor.komandor.ui.message_info.MessageInfoRepository;
import com.komandor.komandor.ui.message_info.MessageInfoRepository_Factory;
import com.komandor.komandor.ui.message_info.MessageInfoViewModel;
import com.komandor.komandor.ui.message_info.MessageInfoViewModel_Factory;
import com.komandor.komandor.viewmodel.ViewModelFactory;
import com.komandor.komandor.widgets.FileLoaderService;
import com.komandor.komandor.widgets.FileLoaderService_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<CryptoStorage> provideCryptoStorageProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<OkHttpClient> provideClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<KomandorAPI> provideApiServiceProvider;

  private Provider<TemporaryStorage> provideTemporaryStorageProvider;

  private Provider<App> provideAppProvider;

  private Provider<KomandorDatabase> provideDatabaseProvider;

  private Provider<UserDao> provideUserDaoProvider;

  private Provider<CertificateDao> provideCertificateDaoProvider;

  private Provider<ProfileRepository> profileRepositoryProvider;

  private Provider<Context> provideApplicationContextProvider;

  private Provider<ChatDao> provideChatDaoProvider;

  private Provider<MessageDao> provideMessageDaoProvider;

  private Provider<FileDao> provideFileDaoProvider;

  private Provider<FileStorage> fileStorageProvider;

  private Provider<MessagesStorage> messagesStorageProvider;

  private Provider<ChatsStorage> chatsStorageProvider;

  private Provider<SocketAPI> provideSocketApiProvider;

  private Provider<CertValidationRepository> certValidationRepositoryProvider;

  private Provider<CertValidationViewModel> certValidationViewModelProvider;

  private Provider<RegistrationRepository> registrationRepositoryProvider;

  private Provider<RegistrationViewModel> registrationViewModelProvider;

  private Provider<ContactDao> provideContactDaoProvider;

  private Provider<ContactsCertificatesDao> provideContactCertificatesDaoProvider;

  private Provider<ContactsStorage> contactsStorageProvider;

  private Provider<ContactsRepository> contactsRepositoryProvider;

  private Provider<ContactsViewModel> contactsViewModelProvider;

  private Provider<ProfileViewModel> profileViewModelProvider;

  private Provider<ChatRepository> chatRepositoryProvider;

  private Provider<ChatsRepository> chatsRepositoryProvider;

  private Provider<ChatsViewModel> chatsViewModelProvider;

  private Provider<ContactInfoRepository> contactInfoRepositoryProvider;

  private Provider<ContactInfoViewModel> contactInfoViewModelProvider;

  private Provider<ChatViewModel> chatViewModelProvider;

  private Provider<MessageInfoRepository> messageInfoRepositoryProvider;

  private Provider<MessageInfoViewModel> messageInfoViewModelProvider;

  private DaggerAppComponent(
      StorageModule storageModuleParam,
      NetworkModule networkModuleParam,
      AppModule appModuleParam) {

    initialize(storageModuleParam, networkModuleParam, appModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends ViewModel>, Provider<ViewModel>>
      getMapOfClassOfAndProviderOfViewModel() {
    return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(8)
        .put(CertValidationViewModel.class, (Provider) certValidationViewModelProvider)
        .put(RegistrationViewModel.class, (Provider) registrationViewModelProvider)
        .put(ContactsViewModel.class, (Provider) contactsViewModelProvider)
        .put(ProfileViewModel.class, (Provider) profileViewModelProvider)
        .put(ChatsViewModel.class, (Provider) chatsViewModelProvider)
        .put(ContactInfoViewModel.class, (Provider) contactInfoViewModelProvider)
        .put(ChatViewModel.class, (Provider) chatViewModelProvider)
        .put(MessageInfoViewModel.class, (Provider) messageInfoViewModelProvider)
        .build();
  }

  private ViewModelFactory getViewModelFactory() {
    return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
  }

  private FileStorage getFileStorage() {
    return new FileStorage(provideFileDaoProvider.get());
  }

  private MessagesStorage getMessagesStorage() {
    return new MessagesStorage(provideMessageDaoProvider.get(), getFileStorage());
  }

  private ChatsStorage getChatsStorage() {
    return new ChatsStorage(
        provideChatDaoProvider.get(), getMessagesStorage(), provideCryptoStorageProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(
      final StorageModule storageModuleParam,
      final NetworkModule networkModuleParam,
      final AppModule appModuleParam) {
    this.provideCryptoStorageProvider =
        DoubleCheck.provider(StorageModule_ProvideCryptoStorageFactory.create(storageModuleParam));
    this.provideGsonProvider =
        DoubleCheck.provider(NetworkModule_ProvideGsonFactory.create(networkModuleParam));
    this.provideClientProvider =
        DoubleCheck.provider(NetworkModule_ProvideClientFactory.create(networkModuleParam));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                networkModuleParam, provideGsonProvider, provideClientProvider));
    this.provideApiServiceProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideApiServiceFactory.create(
                networkModuleParam, provideRetrofitProvider));
    this.provideTemporaryStorageProvider =
        DoubleCheck.provider(
            StorageModule_ProvideTemporaryStorageFactory.create(storageModuleParam));
    this.provideAppProvider =
        DoubleCheck.provider(AppModule_ProvideAppFactory.create(appModuleParam));
    this.provideDatabaseProvider =
        DoubleCheck.provider(
            StorageModule_ProvideDatabaseFactory.create(storageModuleParam, provideAppProvider));
    this.provideUserDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideUserDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.provideCertificateDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideCertificateDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.profileRepositoryProvider =
        DoubleCheck.provider(
            ProfileRepository_Factory.create(
                provideDatabaseProvider,
                provideApiServiceProvider,
                provideTemporaryStorageProvider,
                provideCryptoStorageProvider,
                provideUserDaoProvider,
                provideCertificateDaoProvider));
    this.provideApplicationContextProvider =
        DoubleCheck.provider(AppModule_ProvideApplicationContextFactory.create(appModuleParam));
    this.provideChatDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideChatDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.provideMessageDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideMessageDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.provideFileDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideFileDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.fileStorageProvider = FileStorage_Factory.create(provideFileDaoProvider);
    this.messagesStorageProvider =
        MessagesStorage_Factory.create(provideMessageDaoProvider, fileStorageProvider);
    this.chatsStorageProvider =
        ChatsStorage_Factory.create(
            provideChatDaoProvider, messagesStorageProvider, provideCryptoStorageProvider);
    this.provideSocketApiProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideSocketApiFactory.create(
                networkModuleParam,
                provideApplicationContextProvider,
                chatsStorageProvider,
                messagesStorageProvider,
                fileStorageProvider,
                provideTemporaryStorageProvider));
    this.certValidationRepositoryProvider =
        DoubleCheck.provider(
            CertValidationRepository_Factory.create(
                provideApiServiceProvider,
                provideTemporaryStorageProvider,
                provideCryptoStorageProvider,
                profileRepositoryProvider,
                provideSocketApiProvider));
    this.certValidationViewModelProvider =
        CertValidationViewModel_Factory.create(
            certValidationRepositoryProvider, provideCryptoStorageProvider);
    this.registrationRepositoryProvider =
        DoubleCheck.provider(
            RegistrationRepository_Factory.create(
                provideApiServiceProvider,
                provideTemporaryStorageProvider,
                profileRepositoryProvider,
                provideSocketApiProvider));
    this.registrationViewModelProvider =
        RegistrationViewModel_Factory.create(
            registrationRepositoryProvider,
            provideApiServiceProvider,
            provideTemporaryStorageProvider,
            provideAppProvider);
    this.provideContactDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideContactDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.provideContactCertificatesDaoProvider =
        DoubleCheck.provider(
            StorageModule_ProvideContactCertificatesDaoFactory.create(
                storageModuleParam, provideDatabaseProvider));
    this.contactsStorageProvider =
        ContactsStorage_Factory.create(
            provideContactDaoProvider, provideContactCertificatesDaoProvider);
    this.contactsRepositoryProvider =
        DoubleCheck.provider(
            ContactsRepository_Factory.create(
                contactsStorageProvider,
                provideApplicationContextProvider,
                provideTemporaryStorageProvider,
                provideApiServiceProvider));
    this.contactsViewModelProvider = ContactsViewModel_Factory.create(contactsRepositoryProvider);
    this.profileViewModelProvider = ProfileViewModel_Factory.create(profileRepositoryProvider);
    this.chatRepositoryProvider =
        ChatRepository_Factory.create(
            provideApiServiceProvider,
            provideDatabaseProvider,
            provideSocketApiProvider,
            messagesStorageProvider,
            chatsStorageProvider,
            fileStorageProvider,
            provideTemporaryStorageProvider,
            provideCryptoStorageProvider);
    this.chatsRepositoryProvider =
        ChatsRepository_Factory.create(
            chatsStorageProvider,
            provideApiServiceProvider,
            provideTemporaryStorageProvider,
            provideCryptoStorageProvider,
            chatRepositoryProvider);
    this.chatsViewModelProvider = ChatsViewModel_Factory.create(chatsRepositoryProvider);
    this.contactInfoRepositoryProvider =
        DoubleCheck.provider(
            ContactInfoRepository_Factory.create(
                provideContactDaoProvider,
                chatsStorageProvider,
                provideCertificateDaoProvider,
                provideCryptoStorageProvider,
                provideApiServiceProvider,
                provideTemporaryStorageProvider));
    this.contactInfoViewModelProvider =
        ContactInfoViewModel_Factory.create(contactInfoRepositoryProvider);
    this.chatViewModelProvider =
        ChatViewModel_Factory.create(
            chatRepositoryProvider, chatsStorageProvider, provideCryptoStorageProvider);
    this.messageInfoRepositoryProvider =
        DoubleCheck.provider(
            MessageInfoRepository_Factory.create(
                provideApiServiceProvider,
                provideTemporaryStorageProvider,
                provideCryptoStorageProvider,
                provideCertificateDaoProvider,
                chatsStorageProvider,
                messagesStorageProvider,
                fileStorageProvider));
    this.messageInfoViewModelProvider =
        MessageInfoViewModel_Factory.create(messageInfoRepositoryProvider);
  }

  @Override
  public void inject(CertListFragment injector) {
    injectCertListFragment(injector);
  }

  @Override
  public void inject(CertValidationFragment injector) {
    injectCertValidationFragment(injector);
  }

  @Override
  public void inject(RegistrationFragment injector) {
    injectRegistrationFragment(injector);
  }

  @Override
  public void inject(ProfileFragment injector) {
    injectProfileFragment(injector);
  }

  @Override
  public void inject(ContactsFragment injector) {
    injectContactsFragment(injector);
  }

  @Override
  public void inject(ChatsFragment injector) {
    injectChatsFragment(injector);
  }

  @Override
  public void inject(ContactInfoFragment injector) {
    injectContactInfoFragment(injector);
  }

  @Override
  public void inject(ChatFragment injector) {
    injectChatFragment(injector);
  }

  @Override
  public void inject(MessageInfoFragment injector) {
    injectMessageInfoFragment(injector);
  }

  @Override
  public void inject(FileLoaderService injector) {
    injectFileLoaderService(injector);
  }

  private CertListFragment injectCertListFragment(CertListFragment instance) {
    CertListFragment_MembersInjector.injectCryptoStorage(
        instance, provideCryptoStorageProvider.get());
    return instance;
  }

  private CertValidationFragment injectCertValidationFragment(CertValidationFragment instance) {
    CertValidationFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    CertValidationFragment_MembersInjector.injectTemporaryStorage(
        instance, provideTemporaryStorageProvider.get());
    return instance;
  }

  private RegistrationFragment injectRegistrationFragment(RegistrationFragment instance) {
    RegistrationFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    RegistrationFragment_MembersInjector.injectTemporaryStorage(
        instance, provideTemporaryStorageProvider.get());
    return instance;
  }

  private ProfileFragment injectProfileFragment(ProfileFragment instance) {
    ProfileFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private ContactsFragment injectContactsFragment(ContactsFragment instance) {
    ContactsFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private ChatsFragment injectChatsFragment(ChatsFragment instance) {
    ChatsFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private ContactInfoFragment injectContactInfoFragment(ContactInfoFragment instance) {
    ContactInfoFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private ChatFragment injectChatFragment(ChatFragment instance) {
    ChatFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private MessageInfoFragment injectMessageInfoFragment(MessageInfoFragment instance) {
    MessageInfoFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
    return instance;
  }

  private FileLoaderService injectFileLoaderService(FileLoaderService instance) {
    FileLoaderService_MembersInjector.injectTemporaryStorage(
        instance, provideTemporaryStorageProvider.get());
    FileLoaderService_MembersInjector.injectKomandorAPI(instance, provideApiServiceProvider.get());
    FileLoaderService_MembersInjector.injectFileStorage(instance, getFileStorage());
    FileLoaderService_MembersInjector.injectChatsStorage(instance, getChatsStorage());
    FileLoaderService_MembersInjector.injectCryptoStorage(
        instance, provideCryptoStorageProvider.get());
    return instance;
  }

  public static final class Builder {
    private StorageModule storageModule;

    private NetworkModule networkModule;

    private AppModule appModule;

    private Builder() {}

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public Builder storageModule(StorageModule storageModule) {
      this.storageModule = Preconditions.checkNotNull(storageModule);
      return this;
    }

    public AppComponent build() {
      if (storageModule == null) {
        this.storageModule = new StorageModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      return new DaggerAppComponent(storageModule, networkModule, appModule);
    }
  }
}
