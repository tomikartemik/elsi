// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.message_info;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.database.certificates.CertificateDao;
import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.database.files.FileStorage;
import com.komandor.komandor.data.database.messages.MessagesStorage;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class MessageInfoRepository_Factory implements Factory<MessageInfoRepository> {
  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<TemporaryStorage> temporaryStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  private final Provider<CertificateDao> certificateDaoProvider;

  private final Provider<ChatsStorage> chatsStorageProvider;

  private final Provider<MessagesStorage> messagesStorageProvider;

  private final Provider<FileStorage> fileStorageProvider;

  public MessageInfoRepository_Factory(
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<CertificateDao> certificateDaoProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<MessagesStorage> messagesStorageProvider,
      Provider<FileStorage> fileStorageProvider) {
    this.komandorAPIProvider = komandorAPIProvider;
    this.temporaryStorageProvider = temporaryStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
    this.certificateDaoProvider = certificateDaoProvider;
    this.chatsStorageProvider = chatsStorageProvider;
    this.messagesStorageProvider = messagesStorageProvider;
    this.fileStorageProvider = fileStorageProvider;
  }

  @Override
  public MessageInfoRepository get() {
    return new MessageInfoRepository(
        komandorAPIProvider.get(),
        temporaryStorageProvider.get(),
        cryptoStorageProvider.get(),
        certificateDaoProvider.get(),
        chatsStorageProvider.get(),
        messagesStorageProvider.get(),
        fileStorageProvider.get());
  }

  public static MessageInfoRepository_Factory create(
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<CertificateDao> certificateDaoProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<MessagesStorage> messagesStorageProvider,
      Provider<FileStorage> fileStorageProvider) {
    return new MessageInfoRepository_Factory(
        komandorAPIProvider,
        temporaryStorageProvider,
        cryptoStorageProvider,
        certificateDaoProvider,
        chatsStorageProvider,
        messagesStorageProvider,
        fileStorageProvider);
  }

  public static MessageInfoRepository newMessageInfoRepository(
      KomandorAPI komandorAPI,
      TemporaryStorage temporaryStorage,
      CryptoStorage cryptoStorage,
      CertificateDao certificateDao,
      ChatsStorage chatsStorage,
      MessagesStorage messagesStorage,
      FileStorage fileStorage) {
    return new MessageInfoRepository(
        komandorAPI,
        temporaryStorage,
        cryptoStorage,
        certificateDao,
        chatsStorage,
        messagesStorage,
        fileStorage);
  }
}
