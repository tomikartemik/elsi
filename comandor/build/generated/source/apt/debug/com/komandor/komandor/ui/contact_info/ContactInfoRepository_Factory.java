// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.contact_info;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.database.certificates.CertificateDao;
import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.database.contacts.ContactDao;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ContactInfoRepository_Factory implements Factory<ContactInfoRepository> {
  private final Provider<ContactDao> contactDaoProvider;

  private final Provider<ChatsStorage> chatsStorageProvider;

  private final Provider<CertificateDao> certificateDaoProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<TemporaryStorage> temporaryStorageProvider;

  public ContactInfoRepository_Factory(
      Provider<ContactDao> contactDaoProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<CertificateDao> certificateDaoProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider) {
    this.contactDaoProvider = contactDaoProvider;
    this.chatsStorageProvider = chatsStorageProvider;
    this.certificateDaoProvider = certificateDaoProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
    this.komandorAPIProvider = komandorAPIProvider;
    this.temporaryStorageProvider = temporaryStorageProvider;
  }

  @Override
  public ContactInfoRepository get() {
    return new ContactInfoRepository(
        contactDaoProvider.get(),
        chatsStorageProvider.get(),
        certificateDaoProvider.get(),
        cryptoStorageProvider.get(),
        komandorAPIProvider.get(),
        temporaryStorageProvider.get());
  }

  public static ContactInfoRepository_Factory create(
      Provider<ContactDao> contactDaoProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<CertificateDao> certificateDaoProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider) {
    return new ContactInfoRepository_Factory(
        contactDaoProvider,
        chatsStorageProvider,
        certificateDaoProvider,
        cryptoStorageProvider,
        komandorAPIProvider,
        temporaryStorageProvider);
  }

  public static ContactInfoRepository newContactInfoRepository(
      ContactDao contactDao,
      ChatsStorage chatsStorage,
      CertificateDao certificateDao,
      CryptoStorage cryptoStorage,
      KomandorAPI komandorAPI,
      TemporaryStorage temporaryStorage) {
    return new ContactInfoRepository(
        contactDao, chatsStorage, certificateDao, cryptoStorage, komandorAPI, temporaryStorage);
  }
}
