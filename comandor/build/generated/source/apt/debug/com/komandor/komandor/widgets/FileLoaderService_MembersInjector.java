// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.widgets;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.database.files.FileStorage;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class FileLoaderService_MembersInjector implements MembersInjector<FileLoaderService> {
  private final Provider<TemporaryStorage> temporaryStorageProvider;

  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<FileStorage> fileStorageProvider;

  private final Provider<ChatsStorage> chatsStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  public FileLoaderService_MembersInjector(
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<FileStorage> fileStorageProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    this.temporaryStorageProvider = temporaryStorageProvider;
    this.komandorAPIProvider = komandorAPIProvider;
    this.fileStorageProvider = fileStorageProvider;
    this.chatsStorageProvider = chatsStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
  }

  public static MembersInjector<FileLoaderService> create(
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<FileStorage> fileStorageProvider,
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider) {
    return new FileLoaderService_MembersInjector(
        temporaryStorageProvider,
        komandorAPIProvider,
        fileStorageProvider,
        chatsStorageProvider,
        cryptoStorageProvider);
  }

  @Override
  public void injectMembers(FileLoaderService instance) {
    injectTemporaryStorage(instance, temporaryStorageProvider.get());
    injectKomandorAPI(instance, komandorAPIProvider.get());
    injectFileStorage(instance, fileStorageProvider.get());
    injectChatsStorage(instance, chatsStorageProvider.get());
    injectCryptoStorage(instance, cryptoStorageProvider.get());
  }

  public static void injectTemporaryStorage(
      FileLoaderService instance, TemporaryStorage temporaryStorage) {
    instance.temporaryStorage = temporaryStorage;
  }

  public static void injectKomandorAPI(FileLoaderService instance, KomandorAPI komandorAPI) {
    instance.komandorAPI = komandorAPI;
  }

  public static void injectFileStorage(FileLoaderService instance, FileStorage fileStorage) {
    instance.fileStorage = fileStorage;
  }

  public static void injectChatsStorage(FileLoaderService instance, ChatsStorage chatsStorage) {
    instance.chatsStorage = chatsStorage;
  }

  public static void injectCryptoStorage(FileLoaderService instance, CryptoStorage cryptoStorage) {
    instance.cryptoStorage = cryptoStorage;
  }
}
