// Generated by Dagger (https://google.github.io/dagger).
package com.komandor.komandor.ui.main.chats;

import com.komandor.komandor.data.api.KomandorAPI;
import com.komandor.komandor.data.database.chats.ChatsStorage;
import com.komandor.komandor.data.temporary.CryptoStorage;
import com.komandor.komandor.data.temporary.TemporaryStorage;
import com.komandor.komandor.ui.chat.ChatRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ChatsRepository_Factory implements Factory<ChatsRepository> {
  private final Provider<ChatsStorage> chatsStorageProvider;

  private final Provider<KomandorAPI> komandorAPIProvider;

  private final Provider<TemporaryStorage> temporaryStorageProvider;

  private final Provider<CryptoStorage> cryptoStorageProvider;

  private final Provider<ChatRepository> chatRepositoryProvider;

  public ChatsRepository_Factory(
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<ChatRepository> chatRepositoryProvider) {
    this.chatsStorageProvider = chatsStorageProvider;
    this.komandorAPIProvider = komandorAPIProvider;
    this.temporaryStorageProvider = temporaryStorageProvider;
    this.cryptoStorageProvider = cryptoStorageProvider;
    this.chatRepositoryProvider = chatRepositoryProvider;
  }

  @Override
  public ChatsRepository get() {
    return new ChatsRepository(
        chatsStorageProvider.get(),
        komandorAPIProvider.get(),
        temporaryStorageProvider.get(),
        cryptoStorageProvider.get(),
        chatRepositoryProvider.get());
  }

  public static ChatsRepository_Factory create(
      Provider<ChatsStorage> chatsStorageProvider,
      Provider<KomandorAPI> komandorAPIProvider,
      Provider<TemporaryStorage> temporaryStorageProvider,
      Provider<CryptoStorage> cryptoStorageProvider,
      Provider<ChatRepository> chatRepositoryProvider) {
    return new ChatsRepository_Factory(
        chatsStorageProvider,
        komandorAPIProvider,
        temporaryStorageProvider,
        cryptoStorageProvider,
        chatRepositoryProvider);
  }

  public static ChatsRepository newChatsRepository(
      ChatsStorage chatsStorage,
      KomandorAPI komandorAPI,
      TemporaryStorage temporaryStorage,
      CryptoStorage cryptoStorage,
      ChatRepository chatRepository) {
    return new ChatsRepository(
        chatsStorage, komandorAPI, temporaryStorage, cryptoStorage, chatRepository);
  }
}
